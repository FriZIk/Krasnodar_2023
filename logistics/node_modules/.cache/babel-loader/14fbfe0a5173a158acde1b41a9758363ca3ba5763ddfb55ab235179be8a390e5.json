{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { tSCallSignatureDeclaration } from '@babel/types';\n// import { looseIndexOf } from '@vue/shared';\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      clients: [],\n      // Список клиентов\n      sw_description: [],\n      // Содержимое sw_description\n      hw_revision: [],\n      // Содержимое hw_revision\n      update_log: [],\n      // Лог установки обновлений\n      updates: [],\n      // Список доступных обновлений\n      update_packet: [],\n      packet_of_all_updates: [],\n      errors: []\n    };\n  },\n  // Получение клиентов с сервера\n  created() {\n    axios.get(`http://83.221.202.194:2600/api/get_clients`).then(response => {\n      this.clients = response.data;\n      console.log(response.data);\n      console.log(this.getElementById(\"checkboxUpdater\").value);\n    }).catch(e => {\n      this.errors.push(e);\n    });\n  },\n  methods: {\n    // Функция для получения SwDesctiption для конкретного пользователя\n    GetConfigurationFile(clientName, clientId, targetFile) {\n      console.log(clientName + '#' + clientId + ' ' + targetFile);\n\n      // Получаем строку с именем и номером обновления пользователя\n      let buffer_str = \"\";\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName)) {\n          buffer_str = this.packet_of_all_updates[i];\n          break;\n        }\n      }\n      buffer_str = buffer_str.split(' ');\n      console.log(buffer_str);\n\n      // Делаем запрос на сервер для получение содержимого swdescription\n      axios.get(\"http://83.221.202.194:2600/api/get_configuration_file?client=\" + buffer_str[0] + \"&update=\" + buffer_str[1] + \"&id=\" + buffer_str[2] + \"&file=\" + targetFile).then(response => {\n        console.log(response);\n        if (targetFile == \"hwrevision\") {\n          this.hw_revision = response.data;\n        }\n        if (targetFile == \"sw-description\") {\n          this.sw_description = response.data;\n        }\n      }).catch(errors => {\n        console.log(errors); // Errors\n      });\n    },\n\n    // Функция обновления клиента\n    ClientUpdate() {\n      console.log(this.packet_of_all_updates);\n      if (this.packet_of_all_updates.length != 0) {\n        axios.get(\"http://83.221.202.194:2600/api/update_packet?updates=\" + this.packet_of_all_updates).then(response => {\n          console.log(response);\n          this.update_log = this.update_log + response.data;\n\n          // Cохраняем лог в storage\n          this.$store.commit('change_log', {\n            data: this.update_log\n          });\n          console.log('Лог был изменён');\n          console.log(this.$store.state.logs[0].data);\n\n          // Чистим старый пакет обновлений\n          console.log(\"До отчистки\" + this.packet_of_all_updates);\n          this.packet_of_all_updates = [];\n          console.log(\"После отчистки\" + this.packet_of_all_updates);\n        }).catch(errors => {\n          console.log(errors); // Errors\n        });\n      }\n    },\n\n    // Функция формирования пакетного обновления\n    AddUpdateToPacketFront(clientName, updatePacket, clientId) {\n      // console.log(\"Новое обновление:\" + clientName + \" \" + updatePacket)\n      let update = clientName + ' ' + updatePacket + ' ' + clientId;\n\n      // Проверка на уникального пользователя\n      let triger_1 = true;\n      let index = 0;\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          triger_1 = false;\n          index = i;\n          break;\n        }\n      }\n\n      // Проверка на то, что такого обновления ещё нет\n      let triger_2 = true;\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (update == this.packet_of_all_updates[i]) {\n          triger_2 = false;\n          break;\n        }\n      }\n\n      // Финальное сравнение и принятие решения\n      if (triger_1 == true && triger_2 == true) {\n        this.packet_of_all_updates.push(update);\n      }\n      if (triger_1 == false && triger_2 == true) {\n        this.packet_of_all_updates[index] = update;\n      }\n      console.log(\"Все обновления:\" + this.packet_of_all_updates + '\\n');\n\n      // Формирование вывода в лог\n      let buffer_string = this.packet_of_all_updates.toString();\n      this.update_log = this.update_log + 'Настроены следующие обновления:' + buffer_string + '\\n';\n      this.$store.commit('change_log', {\n        data: this.update_log\n      });\n    },\n    // Функция для проверки есть ли клиент в списке обновлений\n    checkUpdatePacket: function (clientName) {\n      let triger = true;\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          triger = false;\n          break;\n        }\n      }\n      // console.log(clientName + ':' + marker);\n      return triger;\n    },\n    // Функция для отчистки списка обновлений\n    ClearUpdatePacket() {\n      this.packet_of_all_updates = [];\n      return 'kek';\n    },\n    // Функция для отображения выбранного обновления\n    getUpdateForCurrentUser(clientName) {\n      let current_update = \"\";\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          current_update = this.packet_of_all_updates[i];\n          break;\n        } else current_update = \"\";\n      }\n      current_update = current_update.split(' ');\n      console.log(current_update[1]);\n      return current_update[1];\n    }\n  },\n  computed: {}\n};","map":{"version":3,"names":["axios","data","clients","sw_description","hw_revision","update_log","updates","update_packet","packet_of_all_updates","errors","created","get","then","response","console","log","getElementById","value","catch","e","push","methods","GetConfigurationFile","clientName","clientId","targetFile","buffer_str","i","length","includes","split","ClientUpdate","$store","commit","state","logs","AddUpdateToPacketFront","updatePacket","update","triger_1","index","triger_2","buffer_string","toString","checkUpdatePacket","triger","ClearUpdatePacket","getUpdateForCurrentUser","current_update","computed"],"sources":["/home/frizik/projects/Aquarium_logistics/hackaton_front/logistics/src/views/DataView.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <button type=\"button\" class=\"btn btn-success\">Success</button>\n    <button type=\"button\" class=\"btn btn-info\">Info</button>\n    <button type=\"button\" class=\"btn btn-warning\">Warning</button>\n  </div>\n</template>\n\n<style scoped></style>\n\n\n\n<script>\n// import { tSCallSignatureDeclaration } from '@babel/types';\n// import { looseIndexOf } from '@vue/shared';\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      clients: [],        // Список клиентов\n      sw_description: [], // Содержимое sw_description\n      hw_revision: [],    // Содержимое hw_revision\n      update_log: [],     // Лог установки обновлений\n      updates: [],        // Список доступных обновлений\n      update_packet: [],\n      packet_of_all_updates: [],\n      errors: []\n    }\n  },\n\n  // Получение клиентов с сервера\n  created() {\n    axios.get(`http://83.221.202.194:2600/api/get_clients`)\n      .then(response => {\n        this.clients = response.data\n        console.log(response.data)\n        console.log(this.getElementById(\"checkboxUpdater\").value);\n      })\n      .catch(e => {\n        this.errors.push(e)\n      })\n  },\n\n  methods: {\n\n    // Функция для получения SwDesctiption для конкретного пользователя\n    GetConfigurationFile(clientName, clientId, targetFile) {\n      console.log(clientName + '#' + clientId + ' ' + targetFile);\n\n      // Получаем строку с именем и номером обновления пользователя\n      let buffer_str = \"\";\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName)) {\n          buffer_str = this.packet_of_all_updates[i];\n          break;\n        }\n      }\n      buffer_str = buffer_str.split(' ');\n      console.log(buffer_str);\n\n      // Делаем запрос на сервер для получение содержимого swdescription\n      axios.get(\"http://83.221.202.194:2600/api/get_configuration_file?client=\" + buffer_str[0]+ \"&update=\" + buffer_str[1] + \"&id=\" + buffer_str[2] + \"&file=\" + targetFile)\n        .then((response) => {\n          console.log(response);\n          if (targetFile == \"hwrevision\") {\n            this.hw_revision = response.data;\n          }\n          if (targetFile == \"sw-description\") {\n            this.sw_description = response.data;\n          }\n        })\n        .catch((errors) => {\n          console.log(errors); // Errors\n        });\n    },\n\n    // Функция обновления клиента\n    ClientUpdate() {\n      console.log(this.packet_of_all_updates);\n      if(this.packet_of_all_updates.length != 0)\n      {\n      axios.get(\"http://83.221.202.194:2600/api/update_packet?updates=\"+this.packet_of_all_updates)\n        .then((response) => {\n          console.log(response);\n          this.update_log = this.update_log + response.data;\n\n          // Cохраняем лог в storage\n          this.$store.commit('change_log', {\n            data: this.update_log\n          })\n          console.log('Лог был изменён')\n          console.log(this.$store.state.logs[0].data);\n\n          // Чистим старый пакет обновлений\n          console.log(\"До отчистки\" + this.packet_of_all_updates)\n          this.packet_of_all_updates = [];\n          console.log(\"После отчистки\" + this.packet_of_all_updates)\n        })\n        .catch((errors) => {\n          console.log(errors); // Errors\n        });\n      }\n    },\n\n    // Функция формирования пакетного обновления\n    AddUpdateToPacketFront(clientName, updatePacket, clientId) {\n      // console.log(\"Новое обновление:\" + clientName + \" \" + updatePacket)\n      let update = clientName + ' ' + updatePacket + ' ' + clientId;\n\n      // Проверка на уникального пользователя\n      let triger_1 = true;\n      let index = 0;\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          triger_1 = false;\n          index = i;\n          break;\n        }\n      }\n\n      // Проверка на то, что такого обновления ещё нет\n      let triger_2 = true;\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (update == this.packet_of_all_updates[i]) {\n          triger_2 = false;\n          break;\n        }\n      }\n\n      // Финальное сравнение и принятие решения\n      if (triger_1 == true && triger_2 == true) {\n        this.packet_of_all_updates.push(update);\n      }\n      if (triger_1 == false && triger_2 == true) {\n        this.packet_of_all_updates[index] = update;\n      }\n\n      console.log(\"Все обновления:\" + this.packet_of_all_updates + '\\n')\n\n      // Формирование вывода в лог\n      let buffer_string = this.packet_of_all_updates.toString();\n      this.update_log = this.update_log + 'Настроены следующие обновления:' + buffer_string + '\\n';\n\n      this.$store.commit('change_log', {\n        data: this.update_log,\n      })\n    },\n\n    // Функция для проверки есть ли клиент в списке обновлений\n    checkUpdatePacket: function (clientName) {\n      let triger = true;\n\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          triger = false;\n          break;\n        }\n      }\n      // console.log(clientName + ':' + marker);\n      return triger;\n    },\n\n    // Функция для отчистки списка обновлений\n    ClearUpdatePacket(){\n      this.packet_of_all_updates = [];\n      return 'kek';\n    },\n\n    // Функция для отображения выбранного обновления\n    getUpdateForCurrentUser(clientName){\n      let current_update = \"\";\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          current_update = this.packet_of_all_updates[i];\n          break;\n        }\n        else current_update = \"\";\n      }\n      current_update = current_update.split(' ');\n      console.log(current_update[1]);\n      return current_update[1];\n    },\n\n  },\n  computed: {\n  }\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}