{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Список клиентов\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  style: {\n    \"text-align\": \"left\",\n    \"margin-bottom\": \"10px\"\n  }\n}, [/*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"d-grid gap-2 d-md-block\"\n}, [/*#__PURE__*/_createCommentVNode(\" <a class=\\\"btn btn-warning mr-2 me-md-2\\\" href=\\\"#\\\" id=\\\"navbarDarkDropdownMenuLink\\\" role=\\\"button\\\"\\n        aria-expanded=\\\"false\\\" v-on:click=\\\"ClearUpdatePacket()\\\">\\n        Сбросить выбранные\\n      </a> \"), /*#__PURE__*/_createElementVNode(\"a\", {\n  class: \"btn btn-success mr-2 me-md-2\",\n  href: \"#\",\n  id: \"navbarDarkDropdownMenuLink\",\n  role: \"button\",\n  \"aria-expanded\": \"false\",\n  \"data-bs-toggle\": \"modal\",\n  \"data-bs-target\": \"#updateModal\"\n}, \" Обновить выбранные \")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\" Кнопки для обновления  клиентов \"), _hoisted_3]);\n}","map":{"version":3,"names":["class","_createElementVNode","style","_createCommentVNode","href","id","role","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3"],"sources":["/home/frizik/projects/Aquarium_logistics/hackaton_front/logistics/src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <h1>Список клиентов</h1>\n\n  <!-- Кнопки для обновления  клиентов -->\n  <div style=\"text-align:left; margin-bottom: 10px;\">\n    <div class=\"d-grid gap-2 d-md-block \">\n      <!-- <a class=\"btn btn-warning mr-2 me-md-2\" href=\"#\" id=\"navbarDarkDropdownMenuLink\" role=\"button\"\n        aria-expanded=\"false\" v-on:click=\"ClearUpdatePacket()\">\n        Сбросить выбранные\n      </a> -->\n\n      <a class=\"btn btn-success mr-2 me-md-2\" href=\"#\" id=\"navbarDarkDropdownMenuLink\" role=\"button\"\n        aria-expanded=\"false\" data-bs-toggle=\"modal\" data-bs-target=\"#updateModal\">\n        Обновить выбранные\n      </a>\n    </div>\n  </div>\n\n  </div>\n</template>\n\n\n\n<script>\n// import { tSCallSignatureDeclaration } from '@babel/types';\n// import { looseIndexOf } from '@vue/shared';\nimport axios from 'axios'\n\nexport default {\n  data() {\n    return {\n      clients: [],        // Список клиентов\n      sw_description: [], // Содержимое sw_description\n      hw_revision: [],    // Содержимое hw_revision\n      update_log: [],     // Лог установки обновлений\n      updates: [],        // Список доступных обновлений\n      update_packet: [],\n      packet_of_all_updates: [],\n      errors: []\n    }\n  },\n\n  // Получение клиентов с сервера\n  created() {\n    axios.get(`http://83.221.202.194:2600/api/get_clients`)\n      .then(response => {\n        this.clients = response.data\n        console.log(response.data)\n        console.log(this.getElementById(\"checkboxUpdater\").value);\n      })\n      .catch(e => {\n        this.errors.push(e)\n      })\n  },\n\n  methods: {\n\n    // Функция для получения SwDesctiption для конкретного пользователя\n    GetConfigurationFile(clientName, clientId, targetFile) {\n      console.log(clientName + '#' + clientId + ' ' + targetFile);\n\n      // Получаем строку с именем и номером обновления пользователя\n      let buffer_str = \"\";\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName)) {\n          buffer_str = this.packet_of_all_updates[i];\n          break;\n        }\n      }\n      buffer_str = buffer_str.split(' ');\n      console.log(buffer_str);\n\n      // Делаем запрос на сервер для получение содержимого swdescription\n      axios.get(\"http://83.221.202.194:2600/api/get_configuration_file?client=\" + buffer_str[0]+ \"&update=\" + buffer_str[1] + \"&id=\" + buffer_str[2] + \"&file=\" + targetFile)\n        .then((response) => {\n          console.log(response);\n          if (targetFile == \"hwrevision\") {\n            this.hw_revision = response.data;\n          }\n          if (targetFile == \"sw-description\") {\n            this.sw_description = response.data;\n          }\n        })\n        .catch((errors) => {\n          console.log(errors); // Errors\n        });\n    },\n\n    // Функция обновления клиента\n    ClientUpdate() {\n      console.log(this.packet_of_all_updates);\n      if(this.packet_of_all_updates.length != 0)\n      {\n      axios.get(\"http://83.221.202.194:2600/api/update_packet?updates=\"+this.packet_of_all_updates)\n        .then((response) => {\n          console.log(response);\n          this.update_log = this.update_log + response.data;\n\n          // Cохраняем лог в storage\n          this.$store.commit('change_log', {\n            data: this.update_log\n          })\n          console.log('Лог был изменён')\n          console.log(this.$store.state.logs[0].data);\n\n          // Чистим старый пакет обновлений\n          console.log(\"До отчистки\" + this.packet_of_all_updates)\n          this.packet_of_all_updates = [];\n          console.log(\"После отчистки\" + this.packet_of_all_updates)\n        })\n        .catch((errors) => {\n          console.log(errors); // Errors\n        });\n      }\n    },\n\n    // Функция формирования пакетного обновления\n    AddUpdateToPacketFront(clientName, updatePacket, clientId) {\n      // console.log(\"Новое обновление:\" + clientName + \" \" + updatePacket)\n      let update = clientName + ' ' + updatePacket + ' ' + clientId;\n\n      // Проверка на уникального пользователя\n      let triger_1 = true;\n      let index = 0;\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          triger_1 = false;\n          index = i;\n          break;\n        }\n      }\n\n      // Проверка на то, что такого обновления ещё нет\n      let triger_2 = true;\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (update == this.packet_of_all_updates[i]) {\n          triger_2 = false;\n          break;\n        }\n      }\n\n      // Финальное сравнение и принятие решения\n      if (triger_1 == true && triger_2 == true) {\n        this.packet_of_all_updates.push(update);\n      }\n      if (triger_1 == false && triger_2 == true) {\n        this.packet_of_all_updates[index] = update;\n      }\n\n      console.log(\"Все обновления:\" + this.packet_of_all_updates + '\\n')\n\n      // Формирование вывода в лог\n      let buffer_string = this.packet_of_all_updates.toString();\n      this.update_log = this.update_log + 'Настроены следующие обновления:' + buffer_string + '\\n';\n\n      this.$store.commit('change_log', {\n        data: this.update_log,\n      })\n    },\n\n    // Функция для проверки есть ли клиент в списке обновлений\n    checkUpdatePacket: function (clientName) {\n      let triger = true;\n\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          triger = false;\n          break;\n        }\n      }\n      // console.log(clientName + ':' + marker);\n      return triger;\n    },\n\n    // Функция для отчистки списка обновлений\n    ClearUpdatePacket(){\n      this.packet_of_all_updates = [];\n      return 'kek';\n    },\n\n    // Функция для отображения выбранного обновления\n    getUpdateForCurrentUser(clientName){\n      let current_update = \"\";\n      for (let i = 0; i < this.packet_of_all_updates.length; i++) {\n        if (this.packet_of_all_updates[i].includes(clientName) == true) {\n          current_update = this.packet_of_all_updates[i];\n          break;\n        }\n        else current_update = \"\";\n      }\n      current_update = current_update.split(' ');\n      console.log(current_update[1]);\n      return current_update[1];\n    },\n\n  },\n  computed: {\n  }\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;gCACfC,mBAAA,CAAwB,YAApB,iBAAe;gCAGrBA,mBAAA,CAYM;EAZDC,KAA6C,EAA7C;IAAA;IAAA;EAAA;AAA6C,I,aAChDD,mBAAA,CAUM;EAVDD,KAAK,EAAC;AAA0B,I,aACnCG,mBAAA,yNAGQ,E,aAERF,mBAAA,CAGI;EAHDD,KAAK,EAAC,8BAA8B;EAACI,IAAI,EAAC,GAAG;EAACC,EAAE,EAAC,4BAA4B;EAACC,IAAI,EAAC,QAAQ;EAC5F,eAAa,EAAC,OAAO;EAAC,gBAAc,EAAC,OAAO;EAAC,gBAAc,EAAC;GAAe,sBAE7E,E;;;uBAdJC,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,UAAwB,EAE1BN,mBAAA,qCAAwC,EACxCO,UAYM,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}